@inherits TestContext

@code
{
	private readonly Mock<IEventAggregator> eventAggregatorMock;

	public GameTests()
	{
		ComponentFactories.AddStub<Difficulty>();
		ComponentFactories.Add<Minefield, MinefieldForTests>();
		ComponentFactories.AddStub<GameEndStatus>();

		eventAggregatorMock = new();
		eventAggregatorMock
			.Setup(ea => ea.GetEvent<DifficultyLevelChangedEvent>())
			.Returns(new DifficultyLevelChangedEvent());
		eventAggregatorMock
				.Setup(ea => ea.GetEvent<RestartGameEvent>())
				.Returns(new RestartGameEvent());

		Services.AddSingleton(eventAggregatorMock.Object);
	}

	[Fact]
	public void Rendering_GameWithDefaultOptionsShown()
	{
		// Arrange
		MinefieldOptions expectedOptions = MinefieldOptions.Medium;

		// Act
		var fragment = Render(
@<Game />
		);

		// Assert
		fragment.MarkupMatches(
@<div id="f0-game">
	<GameMenu />
	<Minefield />
	<GameEndStatus />
</div>
	);

		var minefield = fragment.FindComponent<MinefieldForTests>();

		minefield.Instance.Options.Should().BeEquivalentTo(expectedOptions);
	}

	[Theory]
	[MemberData(nameof(GetDifficultyLevels))]
	public void OnDifficultyChanged_OptionsAreSetAndPassedToMinefield(DifficultyLevel newDifficulty, MinefieldOptions expectedOptions)
	{
		// Arrange
		var component = RenderComponent<Game>();

		// Act
		component.InvokeAsync(
			() => eventAggregatorMock.Object.GetEvent<DifficultyLevelChangedEvent>().Publish(newDifficulty));

		// Assert
		var minefield = component.FindComponent<MinefieldForTests>();

		minefield.Instance.Options.Should().BeEquivalentTo(expectedOptions);
	}

	[Fact]
	public void OnRestartGame_GameIsRestarted()
	{
		// Arrange
		var component = RenderComponent<Game>();

		// Act
		component.InvokeAsync(
			() => eventAggregatorMock.Object.GetEvent<RestartGameEvent>().Publish());

		// Assert
		component.RenderCount.Should().Be(2);
	}

	[Fact]
	public void ComponentLifeCycle_EventAggregatorSubscribesAndUnsubscribesCorrectly()
	{
		DifficultyLevelChangedForTests changedEvent;
		RestartGameForTests restartGameEvent;

		// the test needs its own context since dispose on the game fragment is only called
		// when the context itself gets disposed. 
		using(TestContext context = new())
		{
			// Arrange
			context.ComponentFactories.AddStub<Difficulty>();
			context.ComponentFactories.Add<Minefield, MinefieldForTests>();
			context.ComponentFactories.AddStub<GameEndStatus>();

			changedEvent = new();
			restartGameEvent = new();

			Mock<IEventAggregator> eventAggregatorMock = new();
			eventAggregatorMock
				.Setup(ea => ea.GetEvent<DifficultyLevelChangedEvent>())
				.Returns(changedEvent);

			eventAggregatorMock
				.Setup(ea => ea.GetEvent<RestartGameEvent>())
				.Returns(restartGameEvent);

			context.Services.AddSingleton(eventAggregatorMock.Object);

			// Act
			using(IRenderedFragment gameFragment =
				context.Render(
@<Game />
				)
			) {}
		}
		
		// Assert
		changedEvent.WasSubscribed.Should().BeTrue();
		changedEvent.HasUnsubscribed.Should().BeTrue();
		restartGameEvent.WasSubscribed.Should().BeTrue();
		restartGameEvent.HasUnsubscribed.Should().BeTrue();
	}

	private static TheoryData<DifficultyLevel, MinefieldOptions> GetDifficultyLevels()
	{
		TheoryData<DifficultyLevel, MinefieldOptions> theory = new();
		theory.Add(DifficultyLevel.Easy, MinefieldOptions.Easy);
		theory.Add(DifficultyLevel.Medium, MinefieldOptions.Medium);
		theory.Add(DifficultyLevel.Hard, MinefieldOptions.Hard);
		return theory;
	}

	private class DifficultyLevelChangedForTests : DifficultyLevelChangedEvent
	{
		public bool WasSubscribed { get; private set; }
		public bool HasUnsubscribed { get; private set; }

		public override void Unsubscribe(Action<DifficultyLevel> subscriber)
		{
			WasSubscribed = Contains(subscriber);
			base.Unsubscribe(subscriber);
			HasUnsubscribed = true;
		}
	}

	private class RestartGameForTests : RestartGameEvent
	{
		public bool WasSubscribed { get; private set; }
		public bool HasUnsubscribed { get; private set; }

		public override void Unsubscribe(Action subscriber)
		{
			WasSubscribed = Contains(subscriber);
			base.Unsubscribe(subscriber);
			HasUnsubscribed = true;
		}
	}

	private class MinefieldForTests : ComponentBase
	{
		[Parameter]
		public MinefieldOptions? Options { get; set; }
	}
}
