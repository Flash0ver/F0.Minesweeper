@inherits TestContext

@code
{
	private readonly Mock<IEventAggregator> eventAggregatorMock;

	public GameEndStatusTests()
	{
		eventAggregatorMock = new(MockBehavior.Strict);
		Services.AddSingleton(eventAggregatorMock.Object);
	}

	[Fact]
	public void Rendering_NoMessageReceived_GameEndTextIsHidden()
	{
		// Arrange
		RenderFragment expectedMarkup = @<div id='f0-gameendstatus'><p class='f0-end-text-invisible' /></div>;

		SetupEventAggregator();

		// Act
		IRenderedComponent<GameEndStatus> componentUnderTest = RenderComponent<GameEndStatus>();

		// Assert
		componentUnderTest.MarkupMatches(expectedMarkup);
	}

	[Fact]
	public void Rendering_GameOverMessageReceived_GameEndTextIsShown()
	{
		// Arrange
		string expectedText = "Random Text" + Guid.NewGuid();
		RenderFragment expectedMarkup = @<div id='f0-gameendstatus'><p class='f0-end-text-visible'>@expectedText</p></div>;

		SetupEventAggregator();

		IRenderedComponent<GameEndStatus> componentUnderTest = RenderComponent<GameEndStatus>();

		// Act
		componentUnderTest.InvokeAsync(() => eventAggregatorMock.Object.GetEvent<GameFinishedEvent>().Publish(expectedText));

		// Assert
		componentUnderTest.MarkupMatches(expectedMarkup);
	}

	[Theory, AutoData]
	public void Rendering_GameRestartMessageReceived_GameEndTextIsHidden(DifficultyLevel difficultyLevel)
	{
		// Arrange
		RenderFragment expectedMarkup = @<div id='f0-gameendstatus'><p class='f0-end-text-invisible' /></div>;

		SetupEventAggregator();

		IRenderedComponent<GameEndStatus> componentUnderTest = RenderComponent<GameEndStatus>();

		// Act
		componentUnderTest.InvokeAsync(() => eventAggregatorMock.Object.GetEvent<GameFinishedEvent>().Publish("Game Over"));
		componentUnderTest.InvokeAsync(() => eventAggregatorMock.Object.GetEvent<DifficultyLevelChangedEvent>().Publish(difficultyLevel));

		// Assert
		componentUnderTest.MarkupMatches(expectedMarkup);
	}

	[Fact]
	public void OnRestartGame_GameEndTextIsHidden()
	{
		// Arrange
		RenderFragment expectedMarkup = @<div id='f0-gameendstatus'><p class='f0-end-text-invisible' /></div>;

		SetupEventAggregator();

		IRenderedComponent<GameEndStatus> componentUnderTest = RenderComponent<GameEndStatus>();

		// Act
		componentUnderTest.InvokeAsync(() => eventAggregatorMock.Object.GetEvent<GameFinishedEvent>().Publish("Game Over"));
		componentUnderTest.InvokeAsync(() => eventAggregatorMock.Object.GetEvent<RestartGameEvent>().Publish());

		// Assert
		componentUnderTest.MarkupMatches(expectedMarkup);
	}

	private void SetupEventAggregator()
	{
		eventAggregatorMock
			.Setup(agg => agg.GetEvent<DifficultyLevelChangedEvent>())
			.Returns(new DifficultyLevelChangedEvent());
		eventAggregatorMock
			.Setup(agg => agg.GetEvent<GameFinishedEvent>())
			.Returns(new GameFinishedEvent());
		eventAggregatorMock
			.Setup(agg => agg.GetEvent<RestartGameEvent>())
			.Returns(new RestartGameEvent());
	}
}
