@inherits TestContext

@code {

	private readonly Mock<ICellStatusManager> cellStatusManagerMock;
	private readonly Mock<ICellVisualisationManager> cellVisualisationManagerMock;

	public CellTests()
	{
		cellStatusManagerMock = new Mock<ICellStatusManager>(MockBehavior.Strict);
		cellVisualisationManagerMock = new Mock<ICellVisualisationManager>(MockBehavior.Strict);
		Services.AddSingleton(cellStatusManagerMock.Object);
		Services.AddSingleton(cellVisualisationManagerMock.Object);
	}

	protected override void Dispose(bool disposing)
	{
		Mock.VerifyAll(cellStatusManagerMock, cellVisualisationManagerMock);
		base.Dispose(disposing);
	}

	[Fact]
	public void Rendering_NoLocationProvided_Throws()
	{
		Action renderAction = () => RenderComponent<Cell>();
		renderAction.Should().Throw<ArgumentNullException>();
	}

	[Theory]
	[InlineData(0, 0)]
	[InlineData(0, 1)]
	[InlineData(1, 0)]
	[InlineData(100, 100)]
	public void Rendering_LocationProvided_ShowsCell(uint x, uint y)
	{
		// Arrange
		RenderFragment expectedMarkup = 
	@<div><button class="f0-cell f0-cell-covered"> </button></div>;

		ComponentParameter parameter = ComponentParameterFactory.Parameter(nameof(Cell.Location), new Location(x, y));

		// Act
		IRenderedComponent<Cell> componentUnderTest = RenderComponent<Cell>(parameter);

		// Assert
		componentUnderTest.MarkupMatches(expectedMarkup);
		componentUnderTest.Instance.Location.Should().BeEquivalentTo(new Location(x, y));
	}

	[Fact]
	public void OnClick_StatusManagerCanMoveNext_CallsUncoveredAsync()
	{
		// Arrange
		Location expectedLocation = new (1, 1);

		cellStatusManagerMock.Setup((manager) => manager.CanMoveNext(CellInteractionType.LeftClick, null)).Returns(true);

		ComponentParameter parameter = ComponentParameterFactory.Parameter(nameof(Cell.Location), expectedLocation);
		IRenderedComponent<Cell> componentUnderTest = RenderComponent<Cell>(parameter);

		Location? uncoveredLocation = null;
		componentUnderTest.Instance.UncoveredAsync += (location) => { uncoveredLocation = location; return Task.CompletedTask; };

		// Act
		componentUnderTest.Find("button").Click();

		// Assert
		uncoveredLocation.Should().NotBeNull().And.Be(expectedLocation);
	}

	[Fact]
	public void OnClick_StatusManagerCanNotMoveNext_UncoveredAsyncIsNotCalled()
	{
		// Arrange
		cellStatusManagerMock.Setup((manager) => manager.CanMoveNext(CellInteractionType.LeftClick, null)).Returns(false);

		ComponentParameter parameter = ComponentParameterFactory.Parameter(nameof(Cell.Location), new Location(1, 1));
		IRenderedComponent<Cell> componentUnderTest = RenderComponent<Cell>(parameter);

		Location? uncoveredLocation = null;
		componentUnderTest.Instance.UncoveredAsync += (location) => { uncoveredLocation = location; return Task.CompletedTask; };

		// Act
		componentUnderTest.Find("button").Click();

		// Assert
		uncoveredLocation.Should().BeNull();
	}

	[Fact]
	[SuppressMessage("Usage", "BL0005:Component parameter should not be set outside of its component.", Justification = "Setting it for unit tests is nice and keeps tests simple and developers happy.")]
	public void OnClick_LocationIsNull_UncoveredAsyncIsNotCalled()
	{
		// Arrange
		Location expectedLocation = new (1, 1);

		ComponentParameter parameter = ComponentParameterFactory.Parameter(nameof(Cell.Location), expectedLocation);
		IRenderedComponent<Cell> componentUnderTest = RenderComponent<Cell>(parameter);

		Location? uncoveredLocation = null;
		componentUnderTest.Instance.UncoveredAsync += (location) => { uncoveredLocation = location; return Task.CompletedTask; };

		componentUnderTest.Instance.Location = null;

		// Act
		componentUnderTest.Find("button").Click();

		// Assert
		uncoveredLocation.Should().BeNull();
	}

	[Fact]
	public void OnClick_UncoveredAsyncIsNull_UncoveredAsyncIsNotCalled()
	{
		// Arrange
		Location expectedLocation = new (1, 1);

		ComponentParameter parameter = ComponentParameterFactory.Parameter(nameof(Cell.Location), expectedLocation);
		IRenderedComponent<Cell> componentUnderTest = RenderComponent<Cell>(parameter);

		// Act && Assert (via not called canmovenext on strict mock)
		componentUnderTest.Find("button").Click();
	}

	[Fact]
	public void OnRightClick_StatusManagerReturnsNewStatus_ChangesTextToCorrectVisualisationFromVisualisationManager()
	{
		// Arrange
		RenderFragment expectedMarkup = @<div><button class="f0-cell f0-cell-covered">?</button></div>;

		cellStatusManagerMock.Setup((manager) => manager.CanMoveNext(CellInteractionType.RightClick, null)).Returns(true);
		cellStatusManagerMock.Setup((manager) => manager.MoveNext(CellInteractionType.RightClick, null)).Returns(CellStatusType.Unsure);
		cellVisualisationManagerMock.Setup((manager) => manager.GetVisualisation(CellStatusType.Unsure, null)).Returns(new CellVisualisation('?', "f0-cell f0-cell-covered"));

		ComponentParameter parameter = ComponentParameterFactory.Parameter(nameof(Cell.Location), new Location(1, 1));
		IRenderedComponent<Cell> componentUnderTest = RenderComponent<Cell>(parameter);

		// Act
		componentUnderTest.Find("button").ContextMenu();

		// Assert
		componentUnderTest.MarkupMatches(expectedMarkup);
	}

	[Fact]
	public void SetUncoveredStatus_StatusManagerCanMoveNext_ChangesTextToCorrectVisualisation()
	{
		// Arrange
		CellInteractionType cellInteraction = CellInteractionType.LeftClick;
		bool isMine = true;
		CellStatusType newStatus = CellStatusType.MineExploded;
		byte adjacentMineCount = 3;
		char expectedStatusChar = 'â˜¢';
		string expectedCssClass = "f0-cell f0-cell-mine-exploded";

		RenderFragment expectedMarkup = @<div><button class="@expectedCssClass">@expectedStatusChar</button></div>;
		cellStatusManagerMock.Setup((manager) => manager.CanMoveNext(cellInteraction, isMine)).Returns(true);
		cellStatusManagerMock.Setup((manager) => manager.MoveNext(cellInteraction, isMine)).Returns(newStatus);
		cellVisualisationManagerMock.Setup((manager) => manager.GetVisualisation(newStatus, adjacentMineCount)).Returns(new CellVisualisation(expectedStatusChar, expectedCssClass));

		ComponentParameter parameter = ComponentParameterFactory.Parameter(nameof(Cell.Location), new Location(1, 1));
		IRenderedComponent<Cell> componentUnderTest = RenderComponent<Cell>(parameter);

		// Act
		componentUnderTest.InvokeAsync(() => componentUnderTest.Instance.SetUncoveredStatus(cellInteraction, isMine, adjacentMineCount));

		// Assert
		componentUnderTest.MarkupMatches(expectedMarkup);
	}

	[Theory]
	[InlineData(9)]
	[InlineData(10)]
	[InlineData(100)]
	public void SetUncoveredStatus_StatusManagerCanMoveNextWithUnsupportedAdjacentMineCount_Throws(byte adjacentMineCount)
	{
		// Arrange
		bool isMine = true;

		cellStatusManagerMock.Setup((manager) => manager.CanMoveNext(CellInteractionType.LeftClick, isMine)).Returns(false);
		cellStatusManagerMock.Setup((manager) => manager.CurrentStatus).Returns(CellStatusType.Mine);

		ComponentParameter parameter = ComponentParameterFactory.Parameter(nameof(Cell.Location), new Location(1, 1));
		IRenderedComponent<Cell> componentUnderTest = RenderComponent<Cell>(parameter);

		// Act && Assert
		Action methodUnderTest = () => componentUnderTest.Instance.SetUncoveredStatus(CellInteractionType.LeftClick, isMine, adjacentMineCount);
		methodUnderTest.Should().Throw<InvalidOperationException>();
	}

	[Theory]
	[InlineData(true)]
	[InlineData(false)]
	public void SetUncoveredStatus_StatusManagerCanNotMoveNextOnLeftClick_Throws(bool isMine)
	{
		// Arrange
		cellStatusManagerMock.Setup((manager) => manager.CanMoveNext(CellInteractionType.LeftClick, isMine)).Returns(false);
		cellStatusManagerMock.Setup((manager) => manager.CurrentStatus).Returns(CellStatusType.Mine);

		ComponentParameter parameter = ComponentParameterFactory.Parameter(nameof(Cell.Location), new Location(1, 1));
		IRenderedComponent<Cell> componentUnderTest = RenderComponent<Cell>(parameter);

		// Act && Assert
		Action methodUnderTest = ()=> componentUnderTest.Instance.SetUncoveredStatus(CellInteractionType.LeftClick, isMine, 2);
		methodUnderTest.Should().Throw<InvalidOperationException>();
	}

	[Theory]
	[InlineData(true)]
	[InlineData(false)]
	public void SetUncoveredStatus_StatusManagerCanNotMoveNextOnAutomaticUncover_DoesNotThrow(bool isMine)
	{
		// Arrange
		cellStatusManagerMock.Setup((manager) => manager.CanMoveNext(CellInteractionType.Automatic, isMine)).Returns(false);

		ComponentParameter parameter = ComponentParameterFactory.Parameter(nameof(Cell.Location), new Location(1, 1));
		IRenderedComponent<Cell> componentUnderTest = RenderComponent<Cell>(parameter);

		// Act && Assert
		Action methodUnderTest = () => componentUnderTest.Instance.SetUncoveredStatus(CellInteractionType.Automatic, isMine, 2);
		methodUnderTest.Should().NotThrow("Automatic uncover should depend on the logic library that inacceptable auto uncover does not happen.");
	}

	[Fact]
	public void DisableClick_LeftMouseClickIsDisabled()
	{
		// Arrange
		const string disabled = "disabled";

		ComponentParameter parameter = ComponentParameterFactory.Parameter(nameof(Cell.Location), new Location(1, 1));
		IRenderedComponent<Cell> componentUnderTest = RenderComponent<Cell>(parameter);

		// Act
		componentUnderTest.InvokeAsync(() => componentUnderTest.Instance.DisableClick());

		// Assert
		var button = componentUnderTest.Find("button");
		button.Attributes.Should().Contain(attribute => attribute.Name == disabled);
	}

	[Fact]
	public void DisableClick_RightMouseClickIsDisabled()
	{
		// Arrange
		ComponentParameter parameter = ComponentParameterFactory.Parameter(nameof(Cell.Location), new Location(1, 1));
		IRenderedComponent<Cell> componentUnderTest = RenderComponent<Cell>(parameter);

		// Act
		componentUnderTest.InvokeAsync(() => componentUnderTest.Instance.DisableClick());
		componentUnderTest.Find("button").ContextMenu();

		// Asserted by the cell status manager being a strict mock and having no method call setup
	}

	[Fact]
	public void OnClick_HasAdjacentMinesToUncover_UncoversAllCells()
	{
		// Arrange
		RenderFragment expectedMarkup = 
	@<div><button class="f0-cell f0-cell-uncovered"> </button></div>;
		Location expectedLocationClickedCell = new(1, 1);

		cellStatusManagerMock.Setup((manager) => manager.CanMoveNext(CellInteractionType.LeftClick, null)).Returns(true);
		cellStatusManagerMock.Setup((manager) => manager.CanMoveNext(CellInteractionType.LeftClick, false)).Returns(true);
		cellStatusManagerMock.Setup((manager) => manager.MoveNext(CellInteractionType.LeftClick, false)).Returns(CellStatusType.Uncovered);
		cellVisualisationManagerMock.Setup((manager) => manager.GetVisualisation(CellStatusType.Uncovered, 0)).Returns(new CellVisualisation(' ', "f0-cell f0-cell-uncovered"));

		ComponentParameter parameterClickedCell = ComponentParameterFactory.Parameter(nameof(Cell.Location), expectedLocationClickedCell);
		IRenderedComponent<Cell> clickedComponentUnderTest = RenderComponent<Cell>(parameterClickedCell);

		Location expectedLocationAutoUncoveredCell = new(1, 2);

		cellStatusManagerMock.Setup((manager) => manager.CanMoveNext(CellInteractionType.Automatic, false)).Returns(true);
		cellStatusManagerMock.Setup((manager) => manager.MoveNext(CellInteractionType.Automatic, false)).Returns(CellStatusType.Uncovered);
		cellVisualisationManagerMock.Setup((manager) => manager.GetVisualisation(CellStatusType.Uncovered, 0)).Returns(new CellVisualisation(' ', "f0-cell f0-cell-uncovered"));

		ComponentParameter parameterAutoUncoveredCell = ComponentParameterFactory.Parameter(nameof(Cell.Location), expectedLocationAutoUncoveredCell);
		IRenderedComponent<Cell> autoUncoveredComponentUnderTest = RenderComponent<Cell>(parameterAutoUncoveredCell);

		Cell[] cells = { clickedComponentUnderTest.Instance, autoUncoveredComponentUnderTest.Instance };
		MinefieldForCellTests minefield = new(cells, null);
		minefield.SetupUncoveredAsync();

		// Act
		clickedComponentUnderTest.Find("button").Click();

		// Assert
		clickedComponentUnderTest.MarkupMatches(expectedMarkup, "Clicked cell does not match expected markup");
		autoUncoveredComponentUnderTest.MarkupMatches(expectedMarkup, "Automatically uncovered cell does not match expected markup");
	}

	private class MinefieldForCellTests
	{
		private readonly IEnumerable<Cell> cells;
		private readonly bool expectsMine;
		private readonly byte expectedAdjacentMineCount;

		public MinefieldForCellTests(IEnumerable<Cell> cells, byte? expectedAdjacentMineCount = null)
		{
			if(expectedAdjacentMineCount <= 0)
			{
				throw new ArgumentException("Test only accepts mine count values > 0.");
			}

			this.cells = cells;
			expectsMine = expectedAdjacentMineCount is not null;
			this.expectedAdjacentMineCount = expectedAdjacentMineCount ?? 0;
		}

		internal void SetupUncoveredAsync()
		{
			foreach (Cell cell in cells)
			{
				cell.UncoveredAsync += OnCellUncoveredAsync;
			}
		}

		private Task OnCellUncoveredAsync(Location location)
		{
			foreach(Cell cell in cells)
			{
				CellInteractionType cellInteraction =
					cell.Location == location
						? CellInteractionType.LeftClick
						: CellInteractionType.Automatic;

				cell.SetUncoveredStatus(cellInteraction, expectsMine, expectedAdjacentMineCount);
			}

			return Task.CompletedTask;
		}
	}
}
